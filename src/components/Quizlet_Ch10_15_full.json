[
  {
    "question": "What does a state-dependent interaction involve?",
    "options": [
      "A control object",
      "A state-dependent entity object",
      "A state-dependent control object",
      "A state-dependent user interaction object"
    ],
    "answer": "A state-dependent control object"
  },
  {
    "question": "Which kind of object executes a state machine?",
    "options": [
      "Any software object",
      "An entity object",
      "A state-dependent control object",
      "A statechart"
    ],
    "answer": "A state-dependent control object"
  },
  {
    "question": "An input message to a state-dependent control object corresponds to:",
    "options": [
      "An event on the internal state machine",
      "An action on the internal state machine",
      "A condition on the internal state machine",
      "A state on the internal state machine"
    ],
    "answer": "An event on the internal state machine"
  },
  {
    "question": "An output message from a state-dependent control object corresponds to:",
    "options": [
      "An event on the internal state machine",
      "An action on the internal state machine",
      "A condition on the internal state machine",
      "A state on the internal state machine"
    ],
    "answer": "An action on the internal state machine"
  },
  {
    "question": "An interaction diagram should be developed for:",
    "options": [
      "Only the main sequence of the use case",
      "The main sequence and every alternative sequence of the use case",
      "The main sequence and a representative alternative sequence of the use case",
      "The alternative sequences of the use case"
    ],
    "answer": "The main sequence and a representative alternative sequence of the use case"
  },
  {
    "question": "Which of the following could happen on an interaction diagram?",
    "options": [
      "A state-dependent control object sends a message to an entity object.",
      "A state-dependent control object sends a message to a coordinator object.",
      "A state-dependent control object sends a message to a printer object.",
      "All of the above"
    ],
    "answer": "All of the above"
  },
  {
    "question": "If the same state machine is used in more than one use case, how is this modeled on interaction diagrams?",
    "options": [
      "Develop one state-dependent control object for each use case.",
      "Develop one state-dependent control object containing states from each use case.",
      "Develop a hierarchical state machine.",
      "Develop a coordinator object."
    ],
    "answer": "Develop a hierarchical state machine."
  },
  {
    "question": "How would two state-dependent control objects communicate with each other?",
    "options": [
      "By sending messages to each other",
      "By transitioning to the same state",
      "Through an entity object",
      "Through a proxy object"
    ],
    "answer": "By sending messages to each other"
  },
  {
    "question": "An object can send alternative messages a or b to a state-dependent control object. How is this handled in the state machine?",
    "options": [
      "One state with a different transition out of it for each incoming message",
      "One state for each of the alternative messages",
      "A composite state to handle the alternative messages",
      "A substate for each alternative message"
    ],
    "answer": "One state with a different transition out of it for each incoming message"
  },
  {
    "question": "In a system in which a client object executes a state machine and communicates with a service, which of the following is true?",
    "options": [
      "The client has a state-dependent control object but the service does not.",
      "The service has a state-dependent control object but the client does not.",
      "Both the client and the service have state-dependent control objects.",
      "Neither the client nor the service has a state-dependent control object."
    ],
    "answer": "Both the client and the service have state-dependent control objects."
  },
  {
    "question": "What does the software architecture describe?",
    "options": [
      "The software inside a building",
      "The structure of a client/server system",
      "The overall structure of a software system",
      "The software classes and their relationships"
    ],
    "answer": "The overall structure of a software system"
  },
  {
    "question": "Which of the following statements is NOT true for a component?",
    "options": [
      "A composite object composed of other objects",
      "An operation",
      "A simple object",
      "Provides an interface"
    ],
    "answer": "An operation"
  },
  {
    "question": "What is a structural view of a software architecture?",
    "options": [
      "A view in terms of a module hierarchy",
      "A view in terms of components and connectors",
      "A view of the physical configuration in terms of nodes and interconnections",
      "A view in terms of objects and messages"
    ],
    "answer": "A view in terms of components and connectors"
  },
  {
    "question": "What is a dynamic view of a software architecture?",
    "options": [
      "A view in terms of a module hierarchy",
      "A view in terms of components and connectors",
      "A view of the physical configuration in terms of nodes and interconnections",
      "A view in terms of objects and messages"
    ],
    "answer": "A view in terms of objects and messages"
  },
  {
    "question": "What is a deployment view of a software architecture?",
    "options": [
      "A static view in terms of a module hierarchy",
      "A static view in terms of components and connectors",
      "A view of the physical configuration in terms of nodes and interconnections",
      "A dynamic interaction view in terms of objects and messages"
    ],
    "answer": "A view of the physical configuration in terms of nodes and interconnections"
  },
  {
    "question": "What is a software architectural pattern?",
    "options": [
      "The structure of the major subsystems of a system",
      "The components and connectors in a software architecture",
      "A small group of collaborating objects",
      "A recurring architecture used in a variety of systems"
    ],
    "answer": "A recurring architecture used in a variety of systems"
  },
  {
    "question": "What happens in a Layers of Abstraction pattern?",
    "options": [
      "Each layer uses services in the layer immediately below it.",
      "Each layer uses services in the layer immediately above it.",
      "Each layer uses services in the layers immediately above it and below it.",
      "Each layer is independent of the other layers."
    ],
    "answer": "Each layer uses services in the layer immediately below it."
  },
  {
    "question": "What happens in a Call/Return pattern?",
    "options": [
      "A calling operation in the calling object sends a message to an operation",
      "A calling operation in the calling object invokes an operation",
      "The calling object waits for a response from the called object.",
      "The calling object does not wait for a response from the called object."
    ],
    "answer": "A calling operation in the calling object invokes an operation"
  },
  {
    "question": "A producer sends a message to a consumer. Which one of the following is asynchronous message communication?",
    "options": [
      "The producer waits for a response from the consumer.",
      "The producer does not wait for a response from the consumer.",
      "The producer goes to sleep.",
      "The producer waits for a timeout."
    ],
    "answer": "The producer does not wait for a response from the consumer."
  },
  {
    "question": "A producer sends a message to a consumer. Which one of the following is synchronous message communication with reply?",
    "options": [
      "The producer waits for a response from the consumer.",
      "The producer does not wait for a response from the consumer.",
      "The producer goes to sleep.",
      "The producer waits for a time."
    ],
    "answer": "The producer waits for a response from the consumer."
  },
  {
    "question": "What is an integrated communication diagram?",
    "options": [
      "A communication diagram formed by combining objects",
      "A synthesis of all the communication diagrams developed to support the use cases",
      "A communication diagram depicting the objects that realize a use case",
      "A communication diagram that integrates the entity objects from the static model"
    ],
    "answer": "A synthesis of all the communication diagrams developed to support the use cases"
  },
  {
    "question": "Which of the following objects should be assigned to the same subsystem?",
    "options": [
      "Objects that are part of the same composite object",
      "Client and server objects",
      "User  interface and entity objects",
      "Objects that are associated with each other"
    ],
    "answer": "Objects that are associated with each other"
  },
  {
    "question": "Objects that are in geographically different locations should be:",
    "options": [
      "In the same subsystem",
      "In different subsystems",
      "In a composite subsystem",
      "In layered subsystems"
    ],
    "answer": "In different subsystems"
  },
  {
    "question": "If scope of control is used in subsystem structuring, then:",
    "options": [
      "A user interface object is placed in the same subsystem as an entity object it updates.",
      "A state-dependent control object is placed in the same subsystem as the objects it controls.",
      "A state-dependent control object is placed in a different subsystem from the objects it controls.",
      "A user interface object is placed in a different subsystem from an entity object it updates."
    ],
    "answer": "A state-dependent control object is placed in the same subsystem as the objects it controls."
  },
  {
    "question": "How should an external object be designed to interface to the system?",
    "options": [
      "It should interface to one subsystem.",
      "It should interface to several subsystems.",
      "It should interface to every subsystem.",
      "It should interface to none of the subsystems."
    ],
    "answer": "It should interface to one subsystem."
  },
  {
    "question": "A user interface subsystem is a type of:",
    "options": [
      "Control subsystem",
      "Service subsystem",
      "Client subsystem",
      "I/O subsystem"
    ],
    "answer": "Control subsystem"
  },
  {
    "question": "Which of the following objects are NOT likely to be in the same subsystem?",
    "options": [
      "User  interface object and entity object",
      "State-dependent control object and coordinator object",
      "Business logic object and entity object",
      "I/O object and state-dependent control object"
    ],
    "answer": "User  interface object and entity object"
  },
  {
    "question": "Which of the following subsystems is NOT likely to be a client subsystem?",
    "options": [
      "Control subsystem",
      "User  interaction subsystem",
      "Service subsystem",
      "I/O subsystem"
    ],
    "answer": "Service subsystem"
  },
  {
    "question": "When is a coordinator subsystem required?",
    "options": [
      "If the subsystem needs to coordinate several internal objects",
      "If the subsystem needs to coordinate multiple I/O devices",
      "If the subsystem receives messages from multiple client subsystems",
      "If the subsystem needs to coordinate the execution of other subsystems"
    ],
    "answer": "If the subsystem needs to coordinate several internal objects"
  },
  {
    "question": "When is a control subsystem required?",
    "options": [
      "If the subsystem needs to control several internal objects",
      "If the subsystem needs to control multiple I/O devices",
      "If the subsystem needs to control multiple client subsystems",
      "If the subsystem needs to control the execution of other subsystems"
    ],
    "answer": "If the subsystem needs to control several internal objects"
  },
  {
    "question": "What is an information hiding object?",
    "options": [
      "An active object that encapsulates data",
      "A passive object that encapsulates data",
      "A class that encapsulates data",
      "A task that encapsulates data"
    ],
    "answer": "An active object that encapsulates data"
  },
  {
    "question": "What is a class interface?",
    "options": [
      "Specifies the internals of the operations of a class",
      "Specifies the externally visible operations of a class",
      "Specifies the parameters of a class operation.",
      "Specifies the signature of a class operation"
    ],
    "answer": "Specifies the externally visible operations of a class"
  },
  {
    "question": "Which of the following is NOT an object-oriented concept?",
    "options": ["Information hiding", "Class", "Subclass", "Subroutine"],
    "answer": "Subroutine"
  },
  {
    "question": "Which of the following is a class that realizes an interface?",
    "options": [
      "The class calls the interface.",
      "The class implements the interface.",
      "The class is called by the interface.",
      "The class is independent of the interface."
    ],
    "answer": "The class implements the interface."
  },
  {
    "question": "Which of the following is an entity class?",
    "options": [
      "An information hiding class",
      "A subclass",
      "A control class",
      "A data abstraction class"
    ],
    "answer": "A data abstraction class"
  },
  {
    "question": "What does a state machine class encapsulate?",
    "options": [
      "A state transition table",
      "A statechart",
      "The current state of the machine",
      "A state transition table and the current state of the machine"
    ],
    "answer": "A state transition table and the current state of the machine"
  },
  {
    "question": "Which of the following is unlikely to be a graphical user interface class?",
    "options": ["A menu", "A window", "A button", "A pin"],
    "answer": "A pin"
  },
  {
    "question": "Which of the following is unlikely to be encapsulated in a business logic class?",
    "options": [
      "A business rule",
      "Calls to operations of an entity class",
      "Deny cash withdrawal if balance of account is less than $10",
      "A dialog box"
    ],
    "answer": "A dialog box"
  },
  {
    "question": "Which of the following is NOT allowed through inheritance?",
    "options": [
      "Subclass inherits attributes from superclass.",
      "Subclass inherits operations from superclass.",
      "Subclass redefines attributes inherited from superclass.",
      "Subclass redefines operations inherited from superclass."
    ],
    "answer": "Subclass redefines attributes inherited from superclass."
  },
  {
    "question": "Which of the following is true for an abstract class?",
    "options": [
      "It is used as a template for creating objects.",
      "It is used as a template for creating subclasses.",
      "It is used as a template for creating classes.",
      "It is used as a template for creating superclasses."
    ],
    "answer": "It is used as a template for creating subclasses."
  },
  {
    "question": "In object-oriented design, polymorphism means that:",
    "options": [
      "Different classes may have the same name.",
      "Different classes may have the same interface name.",
      "Different classes may have the same superclass name.",
      "Different classes may have the same operation name."
    ],
    "answer": "Different classes may have the same operation name."
  },
  {
    "question": "With polymorphism and dynamic binding, an object can:",
    "options": [
      "Invoke operation of different names on the same objects.",
      "Invoke operations of different names on different objects.",
      "Invoke an operation of the same name on the same object.",
      "Invoke an operation of the same name on different objects."
    ],
    "answer": "Invoke an operation of the same name on different objects."
  },
  {
    "question": "What is a server?",
    "options": [
      "A hardware/software system that serves customers",
      "A subsystem that makes requests and waits for the responses",
      "A subsystem that responds to requests from clients",
      "A hardware/software system that provides one or more services for multiple clients"
    ],
    "answer": "A hardware/software system that provides one or more services for multiple clients"
  },
  {
    "question": "The basic client/single service architectural pattern states that:",
    "options": [
      "Multiple clients request services, and multiple services fulfill client requests.",
      "Multiple clients request services, and a service fulfills client requests.",
      "A client requests services, and a service fulfills client requests.",
      "A client requests services, and multiple services fulfill client requests."
    ],
    "answer": "A client requests services, and a service fulfills client requests."
  },
  {
    "question": "In a Multi-tier Client/Service architectural pattern, which of the following is true about an intermediate tier?",
    "options": [
      "An intermediate tier is a client tier.",
      "An intermediate tier is a service tier.",
      "An intermediate tier is both a control tier and a service tier.",
      "An intermediate tier is both a client tier and a service tier."
    ],
    "answer": "An intermediate tier is both a control tier and a service tier."
  },
  {
    "question": "How is Multiple Client/Multiple Service architectural pattern different from a Multiple Client/Single Service architectural pattern?",
    "options": [
      "A service can receive requests from multiple clients.",
      "A client can send requests to multiple services.",
      "A client can send requests to other clients.",
      "A service can respond to requests from multiple clients."
    ],
    "answer": "A client can send requests to multiple services."
  },
  {
    "question": "How is a sequential service designed?",
    "options": [
      "One object that responds to requests from clients",
      "Multiple objects that respond to requests from clients",
      "One subsystem that responds to requests from clients",
      "Multiple subsystems that respond to requests from clients"
    ],
    "answer": "One object that responds to requests from clients"
  },
  {
    "question": "How is a concurrent service designed?",
    "options": [
      "One object that responds to requests from clients",
      "Multiple objects that respond to requests from clients",
      "One subsystem that responds to requests from clients",
      "Multiple subsystems that respond to requests from clients"
    ],
    "answer": "Multiple objects that respond to requests from clients"
  },
  {
    "question": "What is a database wrapper class?",
    "options": [
      "A class that encapsulates a data structure",
      "A class that encapsulates a database",
      "A class that encapsulates the details of how to access data in a database",
      "A class that encapsulates a relational table"
    ],
    "answer": "A class that encapsulates the details of how to access data in a database"
  },
  {
    "question": "When designing an entity class as a relational table, which of the following is NOT true?",
    "options": [
      "The relational table has multiple primary keys.",
      "The relational table has multiple foreign keys.",
      "The relational table has a primary key.",
      "The relational table has a concatenated primary key."
    ],
    "answer": "The relational table has multiple primary keys."
  },
  {
    "question": "When mapping an aggregation hierarchy to a relational table, which of the following is NOT true?",
    "options": [
      "The aggregate and part tables have different primary keys.",
      "The aggregate and part tables have the same primary key.",
      "The primary key of the aggregate table is a foreign key of the part table.",
      "The primary key of the part table is a foreign key of the aggregate table."
    ],
    "answer": "The aggregate and part tables have the same primary key."
  },
  {
    "question": "When mapping a generalization/specialization relationship to a relational database, which of the following is NOT possible?",
    "options": [
      "The superclass and each subclass are designed as relational tables.",
      "Only subclasses are designed as relational tables.",
      "The aggregate and part classes are designed as relational tables.",
      "Only the superclass is designed as a relational table."
    ],
    "answer": "Only subclasses are designed as relational tables."
  }
]
